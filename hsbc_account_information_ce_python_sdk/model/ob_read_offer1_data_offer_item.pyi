# coding: utf-8

"""
    Account Information API

    In this document, you'll find the steps your organization needs to take to use our API services. Included in this guide are details of request and response messages used to support your organization’s integration. The intended audience for this document are **Technical Architects**, **Development Engineers**, **Test Engineers**, and **Operation & Maintenance Engineers** involved in development and support of your organization’s integration. Setting up our API Services is best completed with the assistance of your organization’s IT team, or someone with experience and knowledge of application programming interfaces. This should include experience with **JSON payloads**, **security** and **public key infrastructure (PKI)**. This Document describes the following request and response structure of HSBCnet - Account Information API. For detail implementation guidelines, please refer to the respective section from [develop.hsbc.com](https://develop.hsbc.com/ob-api-documentation/account-information-uk-personal-v319) 

    The version of the OpenAPI document: 3.1.11
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hsbc_account_information_ce_python_sdk import schemas  # noqa: F401


class OBReadOffer1DataOfferItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "AccountId",
        }
        
        class properties:
        
            @staticmethod
            def AccountId() -> typing.Type['AccountId']:
                return AccountId
            
            
            class OfferId(
                schemas.StrSchema
            ):
                pass
            
            
            class OfferType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BALANCE_TRANSFER(cls):
                    return cls("BalanceTransfer")
                
                @schemas.classproperty
                def LIMIT_INCREASE(cls):
                    return cls("LimitIncrease")
                
                @schemas.classproperty
                def MONEY_TRANSFER(cls):
                    return cls("MoneyTransfer")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def PROMOTIONAL_RATE(cls):
                    return cls("PromotionalRate")
            
            
            class Description(
                schemas.StrSchema
            ):
                pass
            StartDateTime = schemas.DateTimeSchema
            EndDateTime = schemas.DateTimeSchema
            
            
            class Rate(
                schemas.StrSchema
            ):
                pass
            Value = schemas.IntSchema
            
            
            class Term(
                schemas.StrSchema
            ):
                pass
            
            
            class URL(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def Amount() -> typing.Type['OBReadOffer1DataOfferItemAmount']:
                return OBReadOffer1DataOfferItemAmount
        
            @staticmethod
            def Fee() -> typing.Type['OBReadOffer1DataOfferItemFee']:
                return OBReadOffer1DataOfferItemFee
            __annotations__ = {
                "AccountId": AccountId,
                "OfferId": OfferId,
                "OfferType": OfferType,
                "Description": Description,
                "StartDateTime": StartDateTime,
                "EndDateTime": EndDateTime,
                "Rate": Rate,
                "Value": Value,
                "Term": Term,
                "URL": URL,
                "Amount": Amount,
                "Fee": Fee,
            }
    
    AccountId: 'AccountId'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AccountId"]) -> 'AccountId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OfferId"]) -> MetaOapg.properties.OfferId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OfferType"]) -> MetaOapg.properties.OfferType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StartDateTime"]) -> MetaOapg.properties.StartDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EndDateTime"]) -> MetaOapg.properties.EndDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Rate"]) -> MetaOapg.properties.Rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Value"]) -> MetaOapg.properties.Value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Term"]) -> MetaOapg.properties.Term: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["URL"]) -> MetaOapg.properties.URL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Amount"]) -> 'OBReadOffer1DataOfferItemAmount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Fee"]) -> 'OBReadOffer1DataOfferItemFee': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["AccountId", "OfferId", "OfferType", "Description", "StartDateTime", "EndDateTime", "Rate", "Value", "Term", "URL", "Amount", "Fee", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AccountId"]) -> 'AccountId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OfferId"]) -> typing.Union[MetaOapg.properties.OfferId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OfferType"]) -> typing.Union[MetaOapg.properties.OfferType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> typing.Union[MetaOapg.properties.Description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StartDateTime"]) -> typing.Union[MetaOapg.properties.StartDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EndDateTime"]) -> typing.Union[MetaOapg.properties.EndDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Rate"]) -> typing.Union[MetaOapg.properties.Rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Value"]) -> typing.Union[MetaOapg.properties.Value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Term"]) -> typing.Union[MetaOapg.properties.Term, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["URL"]) -> typing.Union[MetaOapg.properties.URL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Amount"]) -> typing.Union['OBReadOffer1DataOfferItemAmount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Fee"]) -> typing.Union['OBReadOffer1DataOfferItemFee', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["AccountId", "OfferId", "OfferType", "Description", "StartDateTime", "EndDateTime", "Rate", "Value", "Term", "URL", "Amount", "Fee", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        AccountId: 'AccountId',
        OfferId: typing.Union[MetaOapg.properties.OfferId, str, schemas.Unset] = schemas.unset,
        OfferType: typing.Union[MetaOapg.properties.OfferType, str, schemas.Unset] = schemas.unset,
        Description: typing.Union[MetaOapg.properties.Description, str, schemas.Unset] = schemas.unset,
        StartDateTime: typing.Union[MetaOapg.properties.StartDateTime, str, datetime, schemas.Unset] = schemas.unset,
        EndDateTime: typing.Union[MetaOapg.properties.EndDateTime, str, datetime, schemas.Unset] = schemas.unset,
        Rate: typing.Union[MetaOapg.properties.Rate, str, schemas.Unset] = schemas.unset,
        Value: typing.Union[MetaOapg.properties.Value, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Term: typing.Union[MetaOapg.properties.Term, str, schemas.Unset] = schemas.unset,
        URL: typing.Union[MetaOapg.properties.URL, str, schemas.Unset] = schemas.unset,
        Amount: typing.Union['OBReadOffer1DataOfferItemAmount', schemas.Unset] = schemas.unset,
        Fee: typing.Union['OBReadOffer1DataOfferItemFee', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBReadOffer1DataOfferItem':
        return super().__new__(
            cls,
            *args,
            AccountId=AccountId,
            OfferId=OfferId,
            OfferType=OfferType,
            Description=Description,
            StartDateTime=StartDateTime,
            EndDateTime=EndDateTime,
            Rate=Rate,
            Value=Value,
            Term=Term,
            URL=URL,
            Amount=Amount,
            Fee=Fee,
            _configuration=_configuration,
            **kwargs,
        )

from hsbc_account_information_ce_python_sdk.model.account_id import AccountId
from hsbc_account_information_ce_python_sdk.model.ob_read_offer1_data_offer_item_amount import OBReadOffer1DataOfferItemAmount
from hsbc_account_information_ce_python_sdk.model.ob_read_offer1_data_offer_item_fee import OBReadOffer1DataOfferItemFee
