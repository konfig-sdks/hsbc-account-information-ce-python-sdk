# coding: utf-8

"""
    Account Information API

    In this document, you'll find the steps your organization needs to take to use our API services. Included in this guide are details of request and response messages used to support your organization’s integration. The intended audience for this document are **Technical Architects**, **Development Engineers**, **Test Engineers**, and **Operation & Maintenance Engineers** involved in development and support of your organization’s integration. Setting up our API Services is best completed with the assistance of your organization’s IT team, or someone with experience and knowledge of application programming interfaces. This should include experience with **JSON payloads**, **security** and **public key infrastructure (PKI)**. This Document describes the following request and response structure of HSBCnet - Account Information API. For detail implementation guidelines, please refer to the respective section from [develop.hsbc.com](https://develop.hsbc.com/ob-api-documentation/account-information-uk-personal-v319) 

    The version of the OpenAPI document: 3.1.11
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hsbc_account_information_ce_python_sdk import schemas  # noqa: F401


class OBReadProduct2DataProductItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Product details associated with the Account
    """


    class MetaOapg:
        required = {
            "AccountId",
            "ProductType",
        }
        
        class properties:
        
            @staticmethod
            def AccountId() -> typing.Type['AccountId']:
                return AccountId
            
            
            class ProductType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BUSINESS_CURRENT_ACCOUNT(cls):
                    return cls("BusinessCurrentAccount")
                
                @schemas.classproperty
                def COMMERCIAL_CREDIT_CARD(cls):
                    return cls("CommercialCreditCard")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def PERSONAL_CURRENT_ACCOUNT(cls):
                    return cls("PersonalCurrentAccount")
                
                @schemas.classproperty
                def SMELOAN(cls):
                    return cls("SMELoan")
            
            
            class ProductName(
                schemas.StrSchema
            ):
                pass
            
            
            class ProductId(
                schemas.StrSchema
            ):
                pass
            
            
            class SecondaryProductId(
                schemas.StrSchema
            ):
                pass
            
            
            class MarketingStateId(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def OtherProductType() -> typing.Type['OBReadProduct2DataProductItemOtherProductType']:
                return OBReadProduct2DataProductItemOtherProductType
        
            @staticmethod
            def BCA() -> typing.Type['OBBCAData1']:
                return OBBCAData1
        
            @staticmethod
            def PCA() -> typing.Type['OBPCAData1']:
                return OBPCAData1
            __annotations__ = {
                "AccountId": AccountId,
                "ProductType": ProductType,
                "ProductName": ProductName,
                "ProductId": ProductId,
                "SecondaryProductId": SecondaryProductId,
                "MarketingStateId": MarketingStateId,
                "OtherProductType": OtherProductType,
                "BCA": BCA,
                "PCA": PCA,
            }
    
    AccountId: 'AccountId'
    ProductType: MetaOapg.properties.ProductType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AccountId"]) -> 'AccountId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ProductType"]) -> MetaOapg.properties.ProductType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ProductName"]) -> MetaOapg.properties.ProductName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ProductId"]) -> MetaOapg.properties.ProductId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SecondaryProductId"]) -> MetaOapg.properties.SecondaryProductId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MarketingStateId"]) -> MetaOapg.properties.MarketingStateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherProductType"]) -> 'OBReadProduct2DataProductItemOtherProductType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BCA"]) -> 'OBBCAData1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PCA"]) -> 'OBPCAData1': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["AccountId", "ProductType", "ProductName", "ProductId", "SecondaryProductId", "MarketingStateId", "OtherProductType", "BCA", "PCA", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AccountId"]) -> 'AccountId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ProductType"]) -> MetaOapg.properties.ProductType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ProductName"]) -> typing.Union[MetaOapg.properties.ProductName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ProductId"]) -> typing.Union[MetaOapg.properties.ProductId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SecondaryProductId"]) -> typing.Union[MetaOapg.properties.SecondaryProductId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MarketingStateId"]) -> typing.Union[MetaOapg.properties.MarketingStateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherProductType"]) -> typing.Union['OBReadProduct2DataProductItemOtherProductType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BCA"]) -> typing.Union['OBBCAData1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PCA"]) -> typing.Union['OBPCAData1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["AccountId", "ProductType", "ProductName", "ProductId", "SecondaryProductId", "MarketingStateId", "OtherProductType", "BCA", "PCA", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        AccountId: 'AccountId',
        ProductType: typing.Union[MetaOapg.properties.ProductType, str, ],
        ProductName: typing.Union[MetaOapg.properties.ProductName, str, schemas.Unset] = schemas.unset,
        ProductId: typing.Union[MetaOapg.properties.ProductId, str, schemas.Unset] = schemas.unset,
        SecondaryProductId: typing.Union[MetaOapg.properties.SecondaryProductId, str, schemas.Unset] = schemas.unset,
        MarketingStateId: typing.Union[MetaOapg.properties.MarketingStateId, str, schemas.Unset] = schemas.unset,
        OtherProductType: typing.Union['OBReadProduct2DataProductItemOtherProductType', schemas.Unset] = schemas.unset,
        BCA: typing.Union['OBBCAData1', schemas.Unset] = schemas.unset,
        PCA: typing.Union['OBPCAData1', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBReadProduct2DataProductItem':
        return super().__new__(
            cls,
            *args,
            AccountId=AccountId,
            ProductType=ProductType,
            ProductName=ProductName,
            ProductId=ProductId,
            SecondaryProductId=SecondaryProductId,
            MarketingStateId=MarketingStateId,
            OtherProductType=OtherProductType,
            BCA=BCA,
            PCA=PCA,
            _configuration=_configuration,
            **kwargs,
        )

from hsbc_account_information_ce_python_sdk.model.account_id import AccountId
from hsbc_account_information_ce_python_sdk.model.ob_read_product2_data_product_item_other_product_type import OBReadProduct2DataProductItemOtherProductType
from hsbc_account_information_ce_python_sdk.model.obbca_data1 import OBBCAData1
from hsbc_account_information_ce_python_sdk.model.obpca_data1 import OBPCAData1
