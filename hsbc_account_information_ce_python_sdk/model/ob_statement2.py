# coding: utf-8

"""
    Account Information API

    In this document, you'll find the steps your organization needs to take to use our API services. Included in this guide are details of request and response messages used to support your organization’s integration. The intended audience for this document are **Technical Architects**, **Development Engineers**, **Test Engineers**, and **Operation & Maintenance Engineers** involved in development and support of your organization’s integration. Setting up our API Services is best completed with the assistance of your organization’s IT team, or someone with experience and knowledge of application programming interfaces. This should include experience with **JSON payloads**, **security** and **public key infrastructure (PKI)**. This Document describes the following request and response structure of HSBCnet - Account Information API. For detail implementation guidelines, please refer to the respective section from [develop.hsbc.com](https://develop.hsbc.com/ob-api-documentation/account-information-uk-personal-v319) 

    The version of the OpenAPI document: 3.1.11
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hsbc_account_information_ce_python_sdk import schemas  # noqa: F401


class OBStatement2(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Provides further details on a statement resource.
    """


    class MetaOapg:
        required = {
            "Type",
            "AccountId",
            "CreationDateTime",
            "StartDateTime",
            "EndDateTime",
        }
        
        class properties:
        
            @staticmethod
            def AccountId() -> typing.Type['AccountId']:
                return AccountId
        
            @staticmethod
            def Type() -> typing.Type['OBExternalStatementType1Code']:
                return OBExternalStatementType1Code
            StartDateTime = schemas.DateTimeSchema
            EndDateTime = schemas.DateTimeSchema
            CreationDateTime = schemas.DateTimeSchema
        
            @staticmethod
            def StatementId() -> typing.Type['StatementId']:
                return StatementId
        
            @staticmethod
            def StatementReference() -> typing.Type['StatementReference']:
                return StatementReference
        
            @staticmethod
            def StatementDescription() -> typing.Type['OBStatement2StatementDescription']:
                return OBStatement2StatementDescription
        
            @staticmethod
            def StatementBenefit() -> typing.Type['OBStatement2StatementBenefit']:
                return OBStatement2StatementBenefit
        
            @staticmethod
            def StatementFee() -> typing.Type['OBStatement2StatementFee']:
                return OBStatement2StatementFee
        
            @staticmethod
            def StatementInterest() -> typing.Type['OBStatement2StatementInterest']:
                return OBStatement2StatementInterest
        
            @staticmethod
            def StatementAmount() -> typing.Type['OBStatement2StatementAmount']:
                return OBStatement2StatementAmount
        
            @staticmethod
            def StatementDateTime() -> typing.Type['OBStatement2StatementDateTime']:
                return OBStatement2StatementDateTime
        
            @staticmethod
            def StatementRate() -> typing.Type['OBStatement2StatementRate']:
                return OBStatement2StatementRate
        
            @staticmethod
            def StatementValue() -> typing.Type['OBStatement2StatementValue']:
                return OBStatement2StatementValue
            __annotations__ = {
                "AccountId": AccountId,
                "Type": Type,
                "StartDateTime": StartDateTime,
                "EndDateTime": EndDateTime,
                "CreationDateTime": CreationDateTime,
                "StatementId": StatementId,
                "StatementReference": StatementReference,
                "StatementDescription": StatementDescription,
                "StatementBenefit": StatementBenefit,
                "StatementFee": StatementFee,
                "StatementInterest": StatementInterest,
                "StatementAmount": StatementAmount,
                "StatementDateTime": StatementDateTime,
                "StatementRate": StatementRate,
                "StatementValue": StatementValue,
            }
    
    Type: 'OBExternalStatementType1Code'
    AccountId: 'AccountId'
    CreationDateTime: MetaOapg.properties.CreationDateTime
    StartDateTime: MetaOapg.properties.StartDateTime
    EndDateTime: MetaOapg.properties.EndDateTime
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AccountId"]) -> 'AccountId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> 'OBExternalStatementType1Code': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StartDateTime"]) -> MetaOapg.properties.StartDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EndDateTime"]) -> MetaOapg.properties.EndDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreationDateTime"]) -> MetaOapg.properties.CreationDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StatementId"]) -> 'StatementId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StatementReference"]) -> 'StatementReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StatementDescription"]) -> 'OBStatement2StatementDescription': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StatementBenefit"]) -> 'OBStatement2StatementBenefit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StatementFee"]) -> 'OBStatement2StatementFee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StatementInterest"]) -> 'OBStatement2StatementInterest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StatementAmount"]) -> 'OBStatement2StatementAmount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StatementDateTime"]) -> 'OBStatement2StatementDateTime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StatementRate"]) -> 'OBStatement2StatementRate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StatementValue"]) -> 'OBStatement2StatementValue': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["AccountId", "Type", "StartDateTime", "EndDateTime", "CreationDateTime", "StatementId", "StatementReference", "StatementDescription", "StatementBenefit", "StatementFee", "StatementInterest", "StatementAmount", "StatementDateTime", "StatementRate", "StatementValue", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AccountId"]) -> 'AccountId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> 'OBExternalStatementType1Code': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StartDateTime"]) -> MetaOapg.properties.StartDateTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EndDateTime"]) -> MetaOapg.properties.EndDateTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreationDateTime"]) -> MetaOapg.properties.CreationDateTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StatementId"]) -> typing.Union['StatementId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StatementReference"]) -> typing.Union['StatementReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StatementDescription"]) -> typing.Union['OBStatement2StatementDescription', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StatementBenefit"]) -> typing.Union['OBStatement2StatementBenefit', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StatementFee"]) -> typing.Union['OBStatement2StatementFee', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StatementInterest"]) -> typing.Union['OBStatement2StatementInterest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StatementAmount"]) -> typing.Union['OBStatement2StatementAmount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StatementDateTime"]) -> typing.Union['OBStatement2StatementDateTime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StatementRate"]) -> typing.Union['OBStatement2StatementRate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StatementValue"]) -> typing.Union['OBStatement2StatementValue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["AccountId", "Type", "StartDateTime", "EndDateTime", "CreationDateTime", "StatementId", "StatementReference", "StatementDescription", "StatementBenefit", "StatementFee", "StatementInterest", "StatementAmount", "StatementDateTime", "StatementRate", "StatementValue", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Type: 'OBExternalStatementType1Code',
        AccountId: 'AccountId',
        CreationDateTime: typing.Union[MetaOapg.properties.CreationDateTime, str, datetime, ],
        StartDateTime: typing.Union[MetaOapg.properties.StartDateTime, str, datetime, ],
        EndDateTime: typing.Union[MetaOapg.properties.EndDateTime, str, datetime, ],
        StatementId: typing.Union['StatementId', schemas.Unset] = schemas.unset,
        StatementReference: typing.Union['StatementReference', schemas.Unset] = schemas.unset,
        StatementDescription: typing.Union['OBStatement2StatementDescription', schemas.Unset] = schemas.unset,
        StatementBenefit: typing.Union['OBStatement2StatementBenefit', schemas.Unset] = schemas.unset,
        StatementFee: typing.Union['OBStatement2StatementFee', schemas.Unset] = schemas.unset,
        StatementInterest: typing.Union['OBStatement2StatementInterest', schemas.Unset] = schemas.unset,
        StatementAmount: typing.Union['OBStatement2StatementAmount', schemas.Unset] = schemas.unset,
        StatementDateTime: typing.Union['OBStatement2StatementDateTime', schemas.Unset] = schemas.unset,
        StatementRate: typing.Union['OBStatement2StatementRate', schemas.Unset] = schemas.unset,
        StatementValue: typing.Union['OBStatement2StatementValue', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBStatement2':
        return super().__new__(
            cls,
            *args,
            Type=Type,
            AccountId=AccountId,
            CreationDateTime=CreationDateTime,
            StartDateTime=StartDateTime,
            EndDateTime=EndDateTime,
            StatementId=StatementId,
            StatementReference=StatementReference,
            StatementDescription=StatementDescription,
            StatementBenefit=StatementBenefit,
            StatementFee=StatementFee,
            StatementInterest=StatementInterest,
            StatementAmount=StatementAmount,
            StatementDateTime=StatementDateTime,
            StatementRate=StatementRate,
            StatementValue=StatementValue,
            _configuration=_configuration,
            **kwargs,
        )

from hsbc_account_information_ce_python_sdk.model.account_id import AccountId
from hsbc_account_information_ce_python_sdk.model.ob_external_statement_type1_code import OBExternalStatementType1Code
from hsbc_account_information_ce_python_sdk.model.ob_statement2_statement_amount import OBStatement2StatementAmount
from hsbc_account_information_ce_python_sdk.model.ob_statement2_statement_benefit import OBStatement2StatementBenefit
from hsbc_account_information_ce_python_sdk.model.ob_statement2_statement_date_time import OBStatement2StatementDateTime
from hsbc_account_information_ce_python_sdk.model.ob_statement2_statement_description import OBStatement2StatementDescription
from hsbc_account_information_ce_python_sdk.model.ob_statement2_statement_fee import OBStatement2StatementFee
from hsbc_account_information_ce_python_sdk.model.ob_statement2_statement_interest import OBStatement2StatementInterest
from hsbc_account_information_ce_python_sdk.model.ob_statement2_statement_rate import OBStatement2StatementRate
from hsbc_account_information_ce_python_sdk.model.ob_statement2_statement_value import OBStatement2StatementValue
from hsbc_account_information_ce_python_sdk.model.statement_id import StatementId
from hsbc_account_information_ce_python_sdk.model.statement_reference import StatementReference
