# coding: utf-8

"""
    Account Information API

    In this document, you'll find the steps your organization needs to take to use our API services. Included in this guide are details of request and response messages used to support your organization’s integration. The intended audience for this document are **Technical Architects**, **Development Engineers**, **Test Engineers**, and **Operation & Maintenance Engineers** involved in development and support of your organization’s integration. Setting up our API Services is best completed with the assistance of your organization’s IT team, or someone with experience and knowledge of application programming interfaces. This should include experience with **JSON payloads**, **security** and **public key infrastructure (PKI)**. This Document describes the following request and response structure of HSBCnet - Account Information API. For detail implementation guidelines, please refer to the respective section from [develop.hsbc.com](https://develop.hsbc.com/ob-api-documentation/account-information-uk-personal-v319) 

    The version of the OpenAPI document: 3.1.11
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hsbc_account_information_ce_python_sdk import schemas  # noqa: F401


class OBPCAData1OtherFeesChargesFeeChargeDetailItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Other fees/charges details
    """


    class MetaOapg:
        required = {
            "ApplicationFrequency",
            "FeeType",
            "FeeCategory",
        }
        
        class properties:
            
            
            class FeeCategory(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Other": "OTHER",
                        "Servicing": "SERVICING",
                    }
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def SERVICING(cls):
                    return cls("Servicing")
            
            
            class FeeType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ServiceCAccountFee": "SERVICE_CACCOUNT_FEE",
                        "ServiceCAccountFeeMonthly": "SERVICE_CACCOUNT_FEE_MONTHLY",
                        "ServiceCOther": "SERVICE_COTHER",
                        "Other": "OTHER",
                    }
                
                @schemas.classproperty
                def SERVICE_CACCOUNT_FEE(cls):
                    return cls("ServiceCAccountFee")
                
                @schemas.classproperty
                def SERVICE_CACCOUNT_FEE_MONTHLY(cls):
                    return cls("ServiceCAccountFeeMonthly")
                
                @schemas.classproperty
                def SERVICE_COTHER(cls):
                    return cls("ServiceCOther")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
            
            
            class ApplicationFrequency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "AccountClosing": "ACCOUNT_CLOSING",
                        "AccountOpening": "ACCOUNT_OPENING",
                        "AcademicTerm": "ACADEMIC_TERM",
                        "ChargingPeriod": "CHARGING_PERIOD",
                        "Daily": "DAILY",
                        "PerItem": "PER_ITEM",
                        "Monthly": "MONTHLY",
                        "OnAccountAnniversary": "ON_ACCOUNT_ANNIVERSARY",
                        "Other": "OTHER",
                        "PerHour": "PER_HOUR",
                        "PerOccurrence": "PER_OCCURRENCE",
                        "PerSheet": "PER_SHEET",
                        "PerTransaction": "PER_TRANSACTION",
                        "PerTransactionAmount": "PER_TRANSACTION_AMOUNT",
                        "PerTransactionPercentage": "PER_TRANSACTION_PERCENTAGE",
                        "Quarterly": "QUARTERLY",
                        "SixMonthly": "SIX_MONTHLY",
                        "StatementMonthly": "STATEMENT_MONTHLY",
                        "Weekly": "WEEKLY",
                        "Yearly": "YEARLY",
                    }
                
                @schemas.classproperty
                def ACCOUNT_CLOSING(cls):
                    return cls("AccountClosing")
                
                @schemas.classproperty
                def ACCOUNT_OPENING(cls):
                    return cls("AccountOpening")
                
                @schemas.classproperty
                def ACADEMIC_TERM(cls):
                    return cls("AcademicTerm")
                
                @schemas.classproperty
                def CHARGING_PERIOD(cls):
                    return cls("ChargingPeriod")
                
                @schemas.classproperty
                def DAILY(cls):
                    return cls("Daily")
                
                @schemas.classproperty
                def PER_ITEM(cls):
                    return cls("PerItem")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("Monthly")
                
                @schemas.classproperty
                def ON_ACCOUNT_ANNIVERSARY(cls):
                    return cls("OnAccountAnniversary")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def PER_HOUR(cls):
                    return cls("PerHour")
                
                @schemas.classproperty
                def PER_OCCURRENCE(cls):
                    return cls("PerOccurrence")
                
                @schemas.classproperty
                def PER_SHEET(cls):
                    return cls("PerSheet")
                
                @schemas.classproperty
                def PER_TRANSACTION(cls):
                    return cls("PerTransaction")
                
                @schemas.classproperty
                def PER_TRANSACTION_AMOUNT(cls):
                    return cls("PerTransactionAmount")
                
                @schemas.classproperty
                def PER_TRANSACTION_PERCENTAGE(cls):
                    return cls("PerTransactionPercentage")
                
                @schemas.classproperty
                def QUARTERLY(cls):
                    return cls("Quarterly")
                
                @schemas.classproperty
                def SIX_MONTHLY(cls):
                    return cls("SixMonthly")
                
                @schemas.classproperty
                def STATEMENT_MONTHLY(cls):
                    return cls("StatementMonthly")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("Weekly")
                
                @schemas.classproperty
                def YEARLY(cls):
                    return cls("Yearly")
            
            
            class FeeAmount(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$',
                    }]
            
            
            class FeeRate(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$',
                    }]
            
            
            class FeeRateType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "LinkedBaseRate": "LINKED_BASE_RATE",
                        "Gross": "GROSS",
                        "Net": "NET",
                        "Other": "OTHER",
                    }
                
                @schemas.classproperty
                def LINKED_BASE_RATE(cls):
                    return cls("LinkedBaseRate")
                
                @schemas.classproperty
                def GROSS(cls):
                    return cls("Gross")
                
                @schemas.classproperty
                def NET(cls):
                    return cls("Net")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
            
            
            class CalculationFrequency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "AccountClosing": "ACCOUNT_CLOSING",
                        "AccountOpening": "ACCOUNT_OPENING",
                        "AcademicTerm": "ACADEMIC_TERM",
                        "ChargingPeriod": "CHARGING_PERIOD",
                        "Daily": "DAILY",
                        "PerItem": "PER_ITEM",
                        "Monthly": "MONTHLY",
                        "OnAccountAnniversary": "ON_ACCOUNT_ANNIVERSARY",
                        "Other": "OTHER",
                        "PerHour": "PER_HOUR",
                        "PerOccurrence": "PER_OCCURRENCE",
                        "PerSheet": "PER_SHEET",
                        "PerTransaction": "PER_TRANSACTION",
                        "PerTransactionAmount": "PER_TRANSACTION_AMOUNT",
                        "PerTransactionPercentage": "PER_TRANSACTION_PERCENTAGE",
                        "Quarterly": "QUARTERLY",
                        "SixMonthly": "SIX_MONTHLY",
                        "StatementMonthly": "STATEMENT_MONTHLY",
                        "Weekly": "WEEKLY",
                        "Yearly": "YEARLY",
                    }
                
                @schemas.classproperty
                def ACCOUNT_CLOSING(cls):
                    return cls("AccountClosing")
                
                @schemas.classproperty
                def ACCOUNT_OPENING(cls):
                    return cls("AccountOpening")
                
                @schemas.classproperty
                def ACADEMIC_TERM(cls):
                    return cls("AcademicTerm")
                
                @schemas.classproperty
                def CHARGING_PERIOD(cls):
                    return cls("ChargingPeriod")
                
                @schemas.classproperty
                def DAILY(cls):
                    return cls("Daily")
                
                @schemas.classproperty
                def PER_ITEM(cls):
                    return cls("PerItem")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("Monthly")
                
                @schemas.classproperty
                def ON_ACCOUNT_ANNIVERSARY(cls):
                    return cls("OnAccountAnniversary")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def PER_HOUR(cls):
                    return cls("PerHour")
                
                @schemas.classproperty
                def PER_OCCURRENCE(cls):
                    return cls("PerOccurrence")
                
                @schemas.classproperty
                def PER_SHEET(cls):
                    return cls("PerSheet")
                
                @schemas.classproperty
                def PER_TRANSACTION(cls):
                    return cls("PerTransaction")
                
                @schemas.classproperty
                def PER_TRANSACTION_AMOUNT(cls):
                    return cls("PerTransactionAmount")
                
                @schemas.classproperty
                def PER_TRANSACTION_PERCENTAGE(cls):
                    return cls("PerTransactionPercentage")
                
                @schemas.classproperty
                def QUARTERLY(cls):
                    return cls("Quarterly")
                
                @schemas.classproperty
                def SIX_MONTHLY(cls):
                    return cls("SixMonthly")
                
                @schemas.classproperty
                def STATEMENT_MONTHLY(cls):
                    return cls("StatementMonthly")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("Weekly")
                
                @schemas.classproperty
                def YEARLY(cls):
                    return cls("Yearly")
        
            @staticmethod
            def Notes() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemNotes']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemNotes
        
            @staticmethod
            def OtherFeeCategoryType() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeCategoryType']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeCategoryType
        
            @staticmethod
            def OtherFeeType() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeType']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeType
        
            @staticmethod
            def OtherFeeRateType() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeRateType']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeRateType
        
            @staticmethod
            def OtherApplicationFrequency() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherApplicationFrequency']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherApplicationFrequency
        
            @staticmethod
            def OtherCalculationFrequency() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherCalculationFrequency']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherCalculationFrequency
        
            @staticmethod
            def FeeChargeCap() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeChargeCap']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeChargeCap
        
            @staticmethod
            def FeeApplicableRange() -> typing.Type['OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeApplicableRange']:
                return OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeApplicableRange
            __annotations__ = {
                "FeeCategory": FeeCategory,
                "FeeType": FeeType,
                "ApplicationFrequency": ApplicationFrequency,
                "FeeAmount": FeeAmount,
                "FeeRate": FeeRate,
                "FeeRateType": FeeRateType,
                "CalculationFrequency": CalculationFrequency,
                "Notes": Notes,
                "OtherFeeCategoryType": OtherFeeCategoryType,
                "OtherFeeType": OtherFeeType,
                "OtherFeeRateType": OtherFeeRateType,
                "OtherApplicationFrequency": OtherApplicationFrequency,
                "OtherCalculationFrequency": OtherCalculationFrequency,
                "FeeChargeCap": FeeChargeCap,
                "FeeApplicableRange": FeeApplicableRange,
            }
    
    ApplicationFrequency: MetaOapg.properties.ApplicationFrequency
    FeeType: MetaOapg.properties.FeeType
    FeeCategory: MetaOapg.properties.FeeCategory
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeCategory"]) -> MetaOapg.properties.FeeCategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeType"]) -> MetaOapg.properties.FeeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ApplicationFrequency"]) -> MetaOapg.properties.ApplicationFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeAmount"]) -> MetaOapg.properties.FeeAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeRate"]) -> MetaOapg.properties.FeeRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeRateType"]) -> MetaOapg.properties.FeeRateType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CalculationFrequency"]) -> MetaOapg.properties.CalculationFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Notes"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemNotes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherFeeCategoryType"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeCategoryType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherFeeType"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherFeeRateType"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeRateType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherApplicationFrequency"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherApplicationFrequency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherCalculationFrequency"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherCalculationFrequency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeChargeCap"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeChargeCap': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeApplicableRange"]) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeApplicableRange': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["FeeCategory", "FeeType", "ApplicationFrequency", "FeeAmount", "FeeRate", "FeeRateType", "CalculationFrequency", "Notes", "OtherFeeCategoryType", "OtherFeeType", "OtherFeeRateType", "OtherApplicationFrequency", "OtherCalculationFrequency", "FeeChargeCap", "FeeApplicableRange", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeCategory"]) -> MetaOapg.properties.FeeCategory: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeType"]) -> MetaOapg.properties.FeeType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ApplicationFrequency"]) -> MetaOapg.properties.ApplicationFrequency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeAmount"]) -> typing.Union[MetaOapg.properties.FeeAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeRate"]) -> typing.Union[MetaOapg.properties.FeeRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeRateType"]) -> typing.Union[MetaOapg.properties.FeeRateType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CalculationFrequency"]) -> typing.Union[MetaOapg.properties.CalculationFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Notes"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemNotes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherFeeCategoryType"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeCategoryType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherFeeType"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherFeeRateType"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeRateType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherApplicationFrequency"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherApplicationFrequency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherCalculationFrequency"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherCalculationFrequency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeChargeCap"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeChargeCap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeApplicableRange"]) -> typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeApplicableRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["FeeCategory", "FeeType", "ApplicationFrequency", "FeeAmount", "FeeRate", "FeeRateType", "CalculationFrequency", "Notes", "OtherFeeCategoryType", "OtherFeeType", "OtherFeeRateType", "OtherApplicationFrequency", "OtherCalculationFrequency", "FeeChargeCap", "FeeApplicableRange", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ApplicationFrequency: typing.Union[MetaOapg.properties.ApplicationFrequency, str, ],
        FeeType: typing.Union[MetaOapg.properties.FeeType, str, ],
        FeeCategory: typing.Union[MetaOapg.properties.FeeCategory, str, ],
        FeeAmount: typing.Union[MetaOapg.properties.FeeAmount, str, schemas.Unset] = schemas.unset,
        FeeRate: typing.Union[MetaOapg.properties.FeeRate, str, schemas.Unset] = schemas.unset,
        FeeRateType: typing.Union[MetaOapg.properties.FeeRateType, str, schemas.Unset] = schemas.unset,
        CalculationFrequency: typing.Union[MetaOapg.properties.CalculationFrequency, str, schemas.Unset] = schemas.unset,
        Notes: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemNotes', schemas.Unset] = schemas.unset,
        OtherFeeCategoryType: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeCategoryType', schemas.Unset] = schemas.unset,
        OtherFeeType: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeType', schemas.Unset] = schemas.unset,
        OtherFeeRateType: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeRateType', schemas.Unset] = schemas.unset,
        OtherApplicationFrequency: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherApplicationFrequency', schemas.Unset] = schemas.unset,
        OtherCalculationFrequency: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherCalculationFrequency', schemas.Unset] = schemas.unset,
        FeeChargeCap: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeChargeCap', schemas.Unset] = schemas.unset,
        FeeApplicableRange: typing.Union['OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeApplicableRange', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBPCAData1OtherFeesChargesFeeChargeDetailItem':
        return super().__new__(
            cls,
            *args,
            ApplicationFrequency=ApplicationFrequency,
            FeeType=FeeType,
            FeeCategory=FeeCategory,
            FeeAmount=FeeAmount,
            FeeRate=FeeRate,
            FeeRateType=FeeRateType,
            CalculationFrequency=CalculationFrequency,
            Notes=Notes,
            OtherFeeCategoryType=OtherFeeCategoryType,
            OtherFeeType=OtherFeeType,
            OtherFeeRateType=OtherFeeRateType,
            OtherApplicationFrequency=OtherApplicationFrequency,
            OtherCalculationFrequency=OtherCalculationFrequency,
            FeeChargeCap=FeeChargeCap,
            FeeApplicableRange=FeeApplicableRange,
            _configuration=_configuration,
            **kwargs,
        )

from hsbc_account_information_ce_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_fee_applicable_range import OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeApplicableRange
from hsbc_account_information_ce_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_fee_charge_cap import OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeChargeCap
from hsbc_account_information_ce_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_notes import OBPCAData1OtherFeesChargesFeeChargeDetailItemNotes
from hsbc_account_information_ce_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_other_application_frequency import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherApplicationFrequency
from hsbc_account_information_ce_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_other_calculation_frequency import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherCalculationFrequency
from hsbc_account_information_ce_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_other_fee_category_type import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeCategoryType
from hsbc_account_information_ce_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_other_fee_rate_type import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeRateType
from hsbc_account_information_ce_python_sdk.model.obpca_data1_other_fees_charges_fee_charge_detail_item_other_fee_type import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeType
