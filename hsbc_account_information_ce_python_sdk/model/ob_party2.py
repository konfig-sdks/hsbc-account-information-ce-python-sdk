# coding: utf-8

"""
    Account Information API

    In this document, you'll find the steps your organization needs to take to use our API services. Included in this guide are details of request and response messages used to support your organization’s integration. The intended audience for this document are **Technical Architects**, **Development Engineers**, **Test Engineers**, and **Operation & Maintenance Engineers** involved in development and support of your organization’s integration. Setting up our API Services is best completed with the assistance of your organization’s IT team, or someone with experience and knowledge of application programming interfaces. This should include experience with **JSON payloads**, **security** and **public key infrastructure (PKI)**. This Document describes the following request and response structure of HSBCnet - Account Information API. For detail implementation guidelines, please refer to the respective section from [develop.hsbc.com](https://develop.hsbc.com/ob-api-documentation/account-information-uk-personal-v319) 

    The version of the OpenAPI document: 3.1.11
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hsbc_account_information_ce_python_sdk import schemas  # noqa: F401


class OBParty2(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "PartyId",
        }
        
        class properties:
        
            @staticmethod
            def PartyId() -> typing.Type['PartyId']:
                return PartyId
        
            @staticmethod
            def PartyNumber() -> typing.Type['PartyNumber']:
                return PartyNumber
        
            @staticmethod
            def PartyType() -> typing.Type['OBExternalPartyType1Code']:
                return OBExternalPartyType1Code
        
            @staticmethod
            def Name() -> typing.Type['Name3']:
                return Name3
        
            @staticmethod
            def FullLegalName() -> typing.Type['FullLegalName']:
                return FullLegalName
        
            @staticmethod
            def LegalStructure() -> typing.Type['OBExternalLegalStructureType1Code']:
                return OBExternalLegalStructureType1Code
            BeneficialOwnership = schemas.BoolSchema
        
            @staticmethod
            def AccountRole() -> typing.Type['OBExternalAccountRole1Code']:
                return OBExternalAccountRole1Code
        
            @staticmethod
            def EmailAddress() -> typing.Type['EmailAddress']:
                return EmailAddress
        
            @staticmethod
            def Phone() -> typing.Type['PhoneNumber0']:
                return PhoneNumber0
        
            @staticmethod
            def Mobile() -> typing.Type['PhoneNumber1']:
                return PhoneNumber1
        
            @staticmethod
            def Relationships() -> typing.Type['OBPartyRelationships1']:
                return OBPartyRelationships1
        
            @staticmethod
            def Address() -> typing.Type['OBParty2Address']:
                return OBParty2Address
            __annotations__ = {
                "PartyId": PartyId,
                "PartyNumber": PartyNumber,
                "PartyType": PartyType,
                "Name": Name,
                "FullLegalName": FullLegalName,
                "LegalStructure": LegalStructure,
                "BeneficialOwnership": BeneficialOwnership,
                "AccountRole": AccountRole,
                "EmailAddress": EmailAddress,
                "Phone": Phone,
                "Mobile": Mobile,
                "Relationships": Relationships,
                "Address": Address,
            }
    
    PartyId: 'PartyId'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PartyId"]) -> 'PartyId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PartyNumber"]) -> 'PartyNumber': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PartyType"]) -> 'OBExternalPartyType1Code': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> 'Name3': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FullLegalName"]) -> 'FullLegalName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LegalStructure"]) -> 'OBExternalLegalStructureType1Code': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BeneficialOwnership"]) -> MetaOapg.properties.BeneficialOwnership: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AccountRole"]) -> 'OBExternalAccountRole1Code': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EmailAddress"]) -> 'EmailAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Phone"]) -> 'PhoneNumber0': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Mobile"]) -> 'PhoneNumber1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Relationships"]) -> 'OBPartyRelationships1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Address"]) -> 'OBParty2Address': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["PartyId", "PartyNumber", "PartyType", "Name", "FullLegalName", "LegalStructure", "BeneficialOwnership", "AccountRole", "EmailAddress", "Phone", "Mobile", "Relationships", "Address", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PartyId"]) -> 'PartyId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PartyNumber"]) -> typing.Union['PartyNumber', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PartyType"]) -> typing.Union['OBExternalPartyType1Code', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> typing.Union['Name3', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FullLegalName"]) -> typing.Union['FullLegalName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LegalStructure"]) -> typing.Union['OBExternalLegalStructureType1Code', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BeneficialOwnership"]) -> typing.Union[MetaOapg.properties.BeneficialOwnership, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AccountRole"]) -> typing.Union['OBExternalAccountRole1Code', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EmailAddress"]) -> typing.Union['EmailAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Phone"]) -> typing.Union['PhoneNumber0', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Mobile"]) -> typing.Union['PhoneNumber1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Relationships"]) -> typing.Union['OBPartyRelationships1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Address"]) -> typing.Union['OBParty2Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["PartyId", "PartyNumber", "PartyType", "Name", "FullLegalName", "LegalStructure", "BeneficialOwnership", "AccountRole", "EmailAddress", "Phone", "Mobile", "Relationships", "Address", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        PartyId: 'PartyId',
        PartyNumber: typing.Union['PartyNumber', schemas.Unset] = schemas.unset,
        PartyType: typing.Union['OBExternalPartyType1Code', schemas.Unset] = schemas.unset,
        Name: typing.Union['Name3', schemas.Unset] = schemas.unset,
        FullLegalName: typing.Union['FullLegalName', schemas.Unset] = schemas.unset,
        LegalStructure: typing.Union['OBExternalLegalStructureType1Code', schemas.Unset] = schemas.unset,
        BeneficialOwnership: typing.Union[MetaOapg.properties.BeneficialOwnership, bool, schemas.Unset] = schemas.unset,
        AccountRole: typing.Union['OBExternalAccountRole1Code', schemas.Unset] = schemas.unset,
        EmailAddress: typing.Union['EmailAddress', schemas.Unset] = schemas.unset,
        Phone: typing.Union['PhoneNumber0', schemas.Unset] = schemas.unset,
        Mobile: typing.Union['PhoneNumber1', schemas.Unset] = schemas.unset,
        Relationships: typing.Union['OBPartyRelationships1', schemas.Unset] = schemas.unset,
        Address: typing.Union['OBParty2Address', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBParty2':
        return super().__new__(
            cls,
            *args,
            PartyId=PartyId,
            PartyNumber=PartyNumber,
            PartyType=PartyType,
            Name=Name,
            FullLegalName=FullLegalName,
            LegalStructure=LegalStructure,
            BeneficialOwnership=BeneficialOwnership,
            AccountRole=AccountRole,
            EmailAddress=EmailAddress,
            Phone=Phone,
            Mobile=Mobile,
            Relationships=Relationships,
            Address=Address,
            _configuration=_configuration,
            **kwargs,
        )

from hsbc_account_information_ce_python_sdk.model.email_address import EmailAddress
from hsbc_account_information_ce_python_sdk.model.full_legal_name import FullLegalName
from hsbc_account_information_ce_python_sdk.model.name3 import Name3
from hsbc_account_information_ce_python_sdk.model.ob_external_account_role1_code import OBExternalAccountRole1Code
from hsbc_account_information_ce_python_sdk.model.ob_external_legal_structure_type1_code import OBExternalLegalStructureType1Code
from hsbc_account_information_ce_python_sdk.model.ob_external_party_type1_code import OBExternalPartyType1Code
from hsbc_account_information_ce_python_sdk.model.ob_party2_address import OBParty2Address
from hsbc_account_information_ce_python_sdk.model.ob_party_relationships1 import OBPartyRelationships1
from hsbc_account_information_ce_python_sdk.model.party_id import PartyId
from hsbc_account_information_ce_python_sdk.model.party_number import PartyNumber
from hsbc_account_information_ce_python_sdk.model.phone_number0 import PhoneNumber0
from hsbc_account_information_ce_python_sdk.model.phone_number1 import PhoneNumber1
