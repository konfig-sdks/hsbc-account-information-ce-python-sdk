# coding: utf-8

"""
    Account Information API

    In this document, you'll find the steps your organization needs to take to use our API services. Included in this guide are details of request and response messages used to support your organization’s integration. The intended audience for this document are **Technical Architects**, **Development Engineers**, **Test Engineers**, and **Operation & Maintenance Engineers** involved in development and support of your organization’s integration. Setting up our API Services is best completed with the assistance of your organization’s IT team, or someone with experience and knowledge of application programming interfaces. This should include experience with **JSON payloads**, **security** and **public key infrastructure (PKI)**. This Document describes the following request and response structure of HSBCnet - Account Information API. For detail implementation guidelines, please refer to the respective section from [develop.hsbc.com](https://develop.hsbc.com/ob-api-documentation/account-information-uk-personal-v319) 

    The version of the OpenAPI document: 3.1.11
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hsbc_account_information_ce_python_sdk import schemas  # noqa: F401


class OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Details about the fees/charges
    """


    class MetaOapg:
        required = {
            "ApplicationFrequency",
            "FeeType",
        }
        
        class properties:
        
            @staticmethod
            def FeeType() -> typing.Type['OBOverdraftFeeType1Code']:
                return OBOverdraftFeeType1Code
        
            @staticmethod
            def ApplicationFrequency() -> typing.Type['OBFeeFrequency1Code0']:
                return OBFeeFrequency1Code0
            NegotiableIndicator = schemas.BoolSchema
            OverdraftControlIndicator = schemas.BoolSchema
        
            @staticmethod
            def IncrementalBorrowingAmount() -> typing.Type['OBAmount11']:
                return OBAmount11
        
            @staticmethod
            def FeeAmount() -> typing.Type['OBAmount12']:
                return OBAmount12
        
            @staticmethod
            def FeeRate() -> typing.Type['OBRate10']:
                return OBRate10
        
            @staticmethod
            def FeeRateType() -> typing.Type['OBInterestRateType1Code0']:
                return OBInterestRateType1Code0
        
            @staticmethod
            def CalculationFrequency() -> typing.Type['OBFeeFrequency1Code1']:
                return OBFeeFrequency1Code1
        
            @staticmethod
            def Notes() -> typing.Type['OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemNotes']:
                return OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemNotes
        
            @staticmethod
            def OverdraftFeeChargeCap() -> typing.Type['OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemOverdraftFeeChargeCap']:
                return OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemOverdraftFeeChargeCap
        
            @staticmethod
            def OtherFeeType() -> typing.Type['OBOtherCodeType13']:
                return OBOtherCodeType13
        
            @staticmethod
            def OtherFeeRateType() -> typing.Type['OBOtherCodeType14']:
                return OBOtherCodeType14
        
            @staticmethod
            def OtherApplicationFrequency() -> typing.Type['OBOtherCodeType11']:
                return OBOtherCodeType11
        
            @staticmethod
            def OtherCalculationFrequency() -> typing.Type['OBOtherCodeType12']:
                return OBOtherCodeType12
            __annotations__ = {
                "FeeType": FeeType,
                "ApplicationFrequency": ApplicationFrequency,
                "NegotiableIndicator": NegotiableIndicator,
                "OverdraftControlIndicator": OverdraftControlIndicator,
                "IncrementalBorrowingAmount": IncrementalBorrowingAmount,
                "FeeAmount": FeeAmount,
                "FeeRate": FeeRate,
                "FeeRateType": FeeRateType,
                "CalculationFrequency": CalculationFrequency,
                "Notes": Notes,
                "OverdraftFeeChargeCap": OverdraftFeeChargeCap,
                "OtherFeeType": OtherFeeType,
                "OtherFeeRateType": OtherFeeRateType,
                "OtherApplicationFrequency": OtherApplicationFrequency,
                "OtherCalculationFrequency": OtherCalculationFrequency,
            }
    
    ApplicationFrequency: 'OBFeeFrequency1Code0'
    FeeType: 'OBOverdraftFeeType1Code'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeType"]) -> 'OBOverdraftFeeType1Code': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ApplicationFrequency"]) -> 'OBFeeFrequency1Code0': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["NegotiableIndicator"]) -> MetaOapg.properties.NegotiableIndicator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OverdraftControlIndicator"]) -> MetaOapg.properties.OverdraftControlIndicator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IncrementalBorrowingAmount"]) -> 'OBAmount11': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeAmount"]) -> 'OBAmount12': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeRate"]) -> 'OBRate10': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeRateType"]) -> 'OBInterestRateType1Code0': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CalculationFrequency"]) -> 'OBFeeFrequency1Code1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Notes"]) -> 'OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemNotes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OverdraftFeeChargeCap"]) -> 'OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemOverdraftFeeChargeCap': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherFeeType"]) -> 'OBOtherCodeType13': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherFeeRateType"]) -> 'OBOtherCodeType14': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherApplicationFrequency"]) -> 'OBOtherCodeType11': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherCalculationFrequency"]) -> 'OBOtherCodeType12': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["FeeType", "ApplicationFrequency", "NegotiableIndicator", "OverdraftControlIndicator", "IncrementalBorrowingAmount", "FeeAmount", "FeeRate", "FeeRateType", "CalculationFrequency", "Notes", "OverdraftFeeChargeCap", "OtherFeeType", "OtherFeeRateType", "OtherApplicationFrequency", "OtherCalculationFrequency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeType"]) -> 'OBOverdraftFeeType1Code': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ApplicationFrequency"]) -> 'OBFeeFrequency1Code0': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["NegotiableIndicator"]) -> typing.Union[MetaOapg.properties.NegotiableIndicator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OverdraftControlIndicator"]) -> typing.Union[MetaOapg.properties.OverdraftControlIndicator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IncrementalBorrowingAmount"]) -> typing.Union['OBAmount11', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeAmount"]) -> typing.Union['OBAmount12', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeRate"]) -> typing.Union['OBRate10', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeRateType"]) -> typing.Union['OBInterestRateType1Code0', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CalculationFrequency"]) -> typing.Union['OBFeeFrequency1Code1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Notes"]) -> typing.Union['OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemNotes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OverdraftFeeChargeCap"]) -> typing.Union['OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemOverdraftFeeChargeCap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherFeeType"]) -> typing.Union['OBOtherCodeType13', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherFeeRateType"]) -> typing.Union['OBOtherCodeType14', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherApplicationFrequency"]) -> typing.Union['OBOtherCodeType11', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherCalculationFrequency"]) -> typing.Union['OBOtherCodeType12', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["FeeType", "ApplicationFrequency", "NegotiableIndicator", "OverdraftControlIndicator", "IncrementalBorrowingAmount", "FeeAmount", "FeeRate", "FeeRateType", "CalculationFrequency", "Notes", "OverdraftFeeChargeCap", "OtherFeeType", "OtherFeeRateType", "OtherApplicationFrequency", "OtherCalculationFrequency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ApplicationFrequency: 'OBFeeFrequency1Code0',
        FeeType: 'OBOverdraftFeeType1Code',
        NegotiableIndicator: typing.Union[MetaOapg.properties.NegotiableIndicator, bool, schemas.Unset] = schemas.unset,
        OverdraftControlIndicator: typing.Union[MetaOapg.properties.OverdraftControlIndicator, bool, schemas.Unset] = schemas.unset,
        IncrementalBorrowingAmount: typing.Union['OBAmount11', schemas.Unset] = schemas.unset,
        FeeAmount: typing.Union['OBAmount12', schemas.Unset] = schemas.unset,
        FeeRate: typing.Union['OBRate10', schemas.Unset] = schemas.unset,
        FeeRateType: typing.Union['OBInterestRateType1Code0', schemas.Unset] = schemas.unset,
        CalculationFrequency: typing.Union['OBFeeFrequency1Code1', schemas.Unset] = schemas.unset,
        Notes: typing.Union['OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemNotes', schemas.Unset] = schemas.unset,
        OverdraftFeeChargeCap: typing.Union['OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemOverdraftFeeChargeCap', schemas.Unset] = schemas.unset,
        OtherFeeType: typing.Union['OBOtherCodeType13', schemas.Unset] = schemas.unset,
        OtherFeeRateType: typing.Union['OBOtherCodeType14', schemas.Unset] = schemas.unset,
        OtherApplicationFrequency: typing.Union['OBOtherCodeType11', schemas.Unset] = schemas.unset,
        OtherCalculationFrequency: typing.Union['OBOtherCodeType12', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItem':
        return super().__new__(
            cls,
            *args,
            ApplicationFrequency=ApplicationFrequency,
            FeeType=FeeType,
            NegotiableIndicator=NegotiableIndicator,
            OverdraftControlIndicator=OverdraftControlIndicator,
            IncrementalBorrowingAmount=IncrementalBorrowingAmount,
            FeeAmount=FeeAmount,
            FeeRate=FeeRate,
            FeeRateType=FeeRateType,
            CalculationFrequency=CalculationFrequency,
            Notes=Notes,
            OverdraftFeeChargeCap=OverdraftFeeChargeCap,
            OtherFeeType=OtherFeeType,
            OtherFeeRateType=OtherFeeRateType,
            OtherApplicationFrequency=OtherApplicationFrequency,
            OtherCalculationFrequency=OtherCalculationFrequency,
            _configuration=_configuration,
            **kwargs,
        )

from hsbc_account_information_ce_python_sdk.model.ob_amount11 import OBAmount11
from hsbc_account_information_ce_python_sdk.model.ob_amount12 import OBAmount12
from hsbc_account_information_ce_python_sdk.model.ob_fee_frequency1_code0 import OBFeeFrequency1Code0
from hsbc_account_information_ce_python_sdk.model.ob_fee_frequency1_code1 import OBFeeFrequency1Code1
from hsbc_account_information_ce_python_sdk.model.ob_interest_rate_type1_code0 import OBInterestRateType1Code0
from hsbc_account_information_ce_python_sdk.model.ob_other_code_type11 import OBOtherCodeType11
from hsbc_account_information_ce_python_sdk.model.ob_other_code_type12 import OBOtherCodeType12
from hsbc_account_information_ce_python_sdk.model.ob_other_code_type13 import OBOtherCodeType13
from hsbc_account_information_ce_python_sdk.model.ob_other_code_type14 import OBOtherCodeType14
from hsbc_account_information_ce_python_sdk.model.ob_overdraft_fee_type1_code import OBOverdraftFeeType1Code
from hsbc_account_information_ce_python_sdk.model.ob_rate10 import OBRate10
from hsbc_account_information_ce_python_sdk.model.ob_read_product2_data_product_item_other_product_type_overdraft_overdraft_tier_band_set_item_overdraft_fees_charges_item_overdraft_fee_charge_detail_item_notes import OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemNotes
from hsbc_account_information_ce_python_sdk.model.ob_read_product2_data_product_item_other_product_type_overdraft_overdraft_tier_band_set_item_overdraft_fees_charges_item_overdraft_fee_charge_detail_item_overdraft_fee_charge_cap import OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemOverdraftFeeChargeCap
