# coding: utf-8

"""
    Account Information API

    In this document, you'll find the steps your organization needs to take to use our API services. Included in this guide are details of request and response messages used to support your organization’s integration. The intended audience for this document are **Technical Architects**, **Development Engineers**, **Test Engineers**, and **Operation & Maintenance Engineers** involved in development and support of your organization’s integration. Setting up our API Services is best completed with the assistance of your organization’s IT team, or someone with experience and knowledge of application programming interfaces. This should include experience with **JSON payloads**, **security** and **public key infrastructure (PKI)**. This Document describes the following request and response structure of HSBCnet - Account Information API. For detail implementation guidelines, please refer to the respective section from [develop.hsbc.com](https://develop.hsbc.com/ob-api-documentation/account-information-uk-personal-v319) 

    The version of the OpenAPI document: 3.1.11
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hsbc_account_information_ce_python_sdk import schemas  # noqa: F401


class OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Contains details of fees and charges which are not associated with either Overdraft or features/benefits
    """


    class MetaOapg:
        required = {
            "FeeChargeDetail",
        }
        
        class properties:
        
            @staticmethod
            def FeeChargeDetail() -> typing.Type['OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemFeeChargeDetail']:
                return OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemFeeChargeDetail
            
            
            class TariffType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TTEL(cls):
                    return cls("TTEL")
                
                @schemas.classproperty
                def TTMX(cls):
                    return cls("TTMX")
                
                @schemas.classproperty
                def TTOT(cls):
                    return cls("TTOT")
            
            
            class TariffName(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def OtherTariffType() -> typing.Type['OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemOtherTariffType']:
                return OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemOtherTariffType
        
            @staticmethod
            def FeeChargeCap() -> typing.Type['OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemFeeChargeCap']:
                return OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemFeeChargeCap
            __annotations__ = {
                "FeeChargeDetail": FeeChargeDetail,
                "TariffType": TariffType,
                "TariffName": TariffName,
                "OtherTariffType": OtherTariffType,
                "FeeChargeCap": FeeChargeCap,
            }
    
    FeeChargeDetail: 'OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemFeeChargeDetail'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeChargeDetail"]) -> 'OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemFeeChargeDetail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TariffType"]) -> MetaOapg.properties.TariffType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TariffName"]) -> MetaOapg.properties.TariffName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OtherTariffType"]) -> 'OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemOtherTariffType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FeeChargeCap"]) -> 'OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemFeeChargeCap': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["FeeChargeDetail", "TariffType", "TariffName", "OtherTariffType", "FeeChargeCap", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeChargeDetail"]) -> 'OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemFeeChargeDetail': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TariffType"]) -> typing.Union[MetaOapg.properties.TariffType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TariffName"]) -> typing.Union[MetaOapg.properties.TariffName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OtherTariffType"]) -> typing.Union['OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemOtherTariffType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FeeChargeCap"]) -> typing.Union['OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemFeeChargeCap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["FeeChargeDetail", "TariffType", "TariffName", "OtherTariffType", "FeeChargeCap", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        FeeChargeDetail: 'OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemFeeChargeDetail',
        TariffType: typing.Union[MetaOapg.properties.TariffType, str, schemas.Unset] = schemas.unset,
        TariffName: typing.Union[MetaOapg.properties.TariffName, str, schemas.Unset] = schemas.unset,
        OtherTariffType: typing.Union['OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemOtherTariffType', schemas.Unset] = schemas.unset,
        FeeChargeCap: typing.Union['OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemFeeChargeCap', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItem':
        return super().__new__(
            cls,
            *args,
            FeeChargeDetail=FeeChargeDetail,
            TariffType=TariffType,
            TariffName=TariffName,
            OtherTariffType=OtherTariffType,
            FeeChargeCap=FeeChargeCap,
            _configuration=_configuration,
            **kwargs,
        )

from hsbc_account_information_ce_python_sdk.model.ob_read_product2_data_product_item_other_product_type_other_fees_charges_item_fee_charge_cap import OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemFeeChargeCap
from hsbc_account_information_ce_python_sdk.model.ob_read_product2_data_product_item_other_product_type_other_fees_charges_item_fee_charge_detail import OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemFeeChargeDetail
from hsbc_account_information_ce_python_sdk.model.ob_read_product2_data_product_item_other_product_type_other_fees_charges_item_other_tariff_type import OBReadProduct2DataProductItemOtherProductTypeOtherFeesChargesItemOtherTariffType
