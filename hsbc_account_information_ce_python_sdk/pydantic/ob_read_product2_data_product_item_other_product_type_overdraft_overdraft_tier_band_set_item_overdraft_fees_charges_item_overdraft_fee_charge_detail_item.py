# coding: utf-8

"""
    Account Information API

    In this document, you'll find the steps your organization needs to take to use our API services. Included in this guide are details of request and response messages used to support your organization’s integration. The intended audience for this document are **Technical Architects**, **Development Engineers**, **Test Engineers**, and **Operation & Maintenance Engineers** involved in development and support of your organization’s integration. Setting up our API Services is best completed with the assistance of your organization’s IT team, or someone with experience and knowledge of application programming interfaces. This should include experience with **JSON payloads**, **security** and **public key infrastructure (PKI)**. This Document describes the following request and response structure of HSBCnet - Account Information API. For detail implementation guidelines, please refer to the respective section from [develop.hsbc.com](https://develop.hsbc.com/ob-api-documentation/account-information-uk-personal-v319) 

    The version of the OpenAPI document: 3.1.11
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from hsbc_account_information_ce_python_sdk.pydantic.ob_amount11 import OBAmount11
from hsbc_account_information_ce_python_sdk.pydantic.ob_amount12 import OBAmount12
from hsbc_account_information_ce_python_sdk.pydantic.ob_fee_frequency1_code0 import OBFeeFrequency1Code0
from hsbc_account_information_ce_python_sdk.pydantic.ob_fee_frequency1_code1 import OBFeeFrequency1Code1
from hsbc_account_information_ce_python_sdk.pydantic.ob_interest_rate_type1_code0 import OBInterestRateType1Code0
from hsbc_account_information_ce_python_sdk.pydantic.ob_other_code_type11 import OBOtherCodeType11
from hsbc_account_information_ce_python_sdk.pydantic.ob_other_code_type12 import OBOtherCodeType12
from hsbc_account_information_ce_python_sdk.pydantic.ob_other_code_type13 import OBOtherCodeType13
from hsbc_account_information_ce_python_sdk.pydantic.ob_other_code_type14 import OBOtherCodeType14
from hsbc_account_information_ce_python_sdk.pydantic.ob_overdraft_fee_type1_code import OBOverdraftFeeType1Code
from hsbc_account_information_ce_python_sdk.pydantic.ob_rate10 import OBRate10
from hsbc_account_information_ce_python_sdk.pydantic.ob_read_product2_data_product_item_other_product_type_overdraft_overdraft_tier_band_set_item_overdraft_fees_charges_item_overdraft_fee_charge_detail_item_notes import OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemNotes
from hsbc_account_information_ce_python_sdk.pydantic.ob_read_product2_data_product_item_other_product_type_overdraft_overdraft_tier_band_set_item_overdraft_fees_charges_item_overdraft_fee_charge_detail_item_overdraft_fee_charge_cap import OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemOverdraftFeeChargeCap

class OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItem(BaseModel):
    fee_type: OBOverdraftFeeType1Code = Field(alias='FeeType')

    application_frequency: OBFeeFrequency1Code0 = Field(alias='ApplicationFrequency')

    # Indicates whether fee and charges are negotiable
    negotiable_indicator: typing.Optional[bool] = Field(None, alias='NegotiableIndicator')

    # Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
    overdraft_control_indicator: typing.Optional[bool] = Field(None, alias='OverdraftControlIndicator')

    incremental_borrowing_amount: typing.Optional[OBAmount11] = Field(None, alias='IncrementalBorrowingAmount')

    fee_amount: typing.Optional[OBAmount12] = Field(None, alias='FeeAmount')

    fee_rate: typing.Optional[OBRate10] = Field(None, alias='FeeRate')

    fee_rate_type: typing.Optional[OBInterestRateType1Code0] = Field(None, alias='FeeRateType')

    calculation_frequency: typing.Optional[OBFeeFrequency1Code1] = Field(None, alias='CalculationFrequency')

    notes: typing.Optional[OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemNotes] = Field(None, alias='Notes')

    overdraft_fee_charge_cap: typing.Optional[OBReadProduct2DataProductItemOtherProductTypeOverdraftOverdraftTierBandSetItemOverdraftFeesChargesItemOverdraftFeeChargeDetailItemOverdraftFeeChargeCap] = Field(None, alias='OverdraftFeeChargeCap')

    other_fee_type: typing.Optional[OBOtherCodeType13] = Field(None, alias='OtherFeeType')

    other_fee_rate_type: typing.Optional[OBOtherCodeType14] = Field(None, alias='OtherFeeRateType')

    other_application_frequency: typing.Optional[OBOtherCodeType11] = Field(None, alias='OtherApplicationFrequency')

    other_calculation_frequency: typing.Optional[OBOtherCodeType12] = Field(None, alias='OtherCalculationFrequency')
    class Config:
        arbitrary_types_allowed = True
