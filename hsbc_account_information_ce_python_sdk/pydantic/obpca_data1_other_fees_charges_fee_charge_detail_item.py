# coding: utf-8

"""
    Account Information API

    In this document, you'll find the steps your organization needs to take to use our API services. Included in this guide are details of request and response messages used to support your organization’s integration. The intended audience for this document are **Technical Architects**, **Development Engineers**, **Test Engineers**, and **Operation & Maintenance Engineers** involved in development and support of your organization’s integration. Setting up our API Services is best completed with the assistance of your organization’s IT team, or someone with experience and knowledge of application programming interfaces. This should include experience with **JSON payloads**, **security** and **public key infrastructure (PKI)**. This Document describes the following request and response structure of HSBCnet - Account Information API. For detail implementation guidelines, please refer to the respective section from [develop.hsbc.com](https://develop.hsbc.com/ob-api-documentation/account-information-uk-personal-v319) 

    The version of the OpenAPI document: 3.1.11
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from hsbc_account_information_ce_python_sdk.pydantic.obpca_data1_other_fees_charges_fee_charge_detail_item_fee_applicable_range import OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeApplicableRange
from hsbc_account_information_ce_python_sdk.pydantic.obpca_data1_other_fees_charges_fee_charge_detail_item_fee_charge_cap import OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeChargeCap
from hsbc_account_information_ce_python_sdk.pydantic.obpca_data1_other_fees_charges_fee_charge_detail_item_notes import OBPCAData1OtherFeesChargesFeeChargeDetailItemNotes
from hsbc_account_information_ce_python_sdk.pydantic.obpca_data1_other_fees_charges_fee_charge_detail_item_other_application_frequency import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherApplicationFrequency
from hsbc_account_information_ce_python_sdk.pydantic.obpca_data1_other_fees_charges_fee_charge_detail_item_other_calculation_frequency import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherCalculationFrequency
from hsbc_account_information_ce_python_sdk.pydantic.obpca_data1_other_fees_charges_fee_charge_detail_item_other_fee_category_type import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeCategoryType
from hsbc_account_information_ce_python_sdk.pydantic.obpca_data1_other_fees_charges_fee_charge_detail_item_other_fee_rate_type import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeRateType
from hsbc_account_information_ce_python_sdk.pydantic.obpca_data1_other_fees_charges_fee_charge_detail_item_other_fee_type import OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeType

class OBPCAData1OtherFeesChargesFeeChargeDetailItem(BaseModel):
    # Categorisation of fees and charges into standard categories.
    fee_category: Literal["Other", "Servicing"] = Field(alias='FeeCategory')

    # Fee/Charge Type
    fee_type: Literal["ServiceCAccountFee", "ServiceCAccountFeeMonthly", "ServiceCOther", "Other"] = Field(alias='FeeType')

    # How frequently the fee/charge is applied to the account
    application_frequency: Literal["AccountClosing", "AccountOpening", "AcademicTerm", "ChargingPeriod", "Daily", "PerItem", "Monthly", "OnAccountAnniversary", "Other", "PerHour", "PerOccurrence", "PerSheet", "PerTransaction", "PerTransactionAmount", "PerTransactionPercentage", "Quarterly", "SixMonthly", "StatementMonthly", "Weekly", "Yearly"] = Field(alias='ApplicationFrequency')

    # Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
    fee_amount: typing.Optional[str] = Field(None, alias='FeeAmount')

    # Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)
    fee_rate: typing.Optional[str] = Field(None, alias='FeeRate')

    # Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
    fee_rate_type: typing.Optional[Literal["LinkedBaseRate", "Gross", "Net", "Other"]] = Field(None, alias='FeeRateType')

    # How frequently the fee/charge is calculated
    calculation_frequency: typing.Optional[Literal["AccountClosing", "AccountOpening", "AcademicTerm", "ChargingPeriod", "Daily", "PerItem", "Monthly", "OnAccountAnniversary", "Other", "PerHour", "PerOccurrence", "PerSheet", "PerTransaction", "PerTransactionAmount", "PerTransactionPercentage", "Quarterly", "SixMonthly", "StatementMonthly", "Weekly", "Yearly"]] = Field(None, alias='CalculationFrequency')

    notes: typing.Optional[OBPCAData1OtherFeesChargesFeeChargeDetailItemNotes] = Field(None, alias='Notes')

    other_fee_category_type: typing.Optional[OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeCategoryType] = Field(None, alias='OtherFeeCategoryType')

    other_fee_type: typing.Optional[OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeType] = Field(None, alias='OtherFeeType')

    other_fee_rate_type: typing.Optional[OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherFeeRateType] = Field(None, alias='OtherFeeRateType')

    other_application_frequency: typing.Optional[OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherApplicationFrequency] = Field(None, alias='OtherApplicationFrequency')

    other_calculation_frequency: typing.Optional[OBPCAData1OtherFeesChargesFeeChargeDetailItemOtherCalculationFrequency] = Field(None, alias='OtherCalculationFrequency')

    fee_charge_cap: typing.Optional[OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeChargeCap] = Field(None, alias='FeeChargeCap')

    fee_applicable_range: typing.Optional[OBPCAData1OtherFeesChargesFeeChargeDetailItemFeeApplicableRange] = Field(None, alias='FeeApplicableRange')
    class Config:
        arbitrary_types_allowed = True
